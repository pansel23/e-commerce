name: Full DevOps CI/CD Pipeline

on:
  push:
    branches: [main]

env:
  AWS_REGION: us-east-2
  CLUSTER_NAME: ecommerce-cluster

jobs:
  terraform:
    name: Provision Infrastructure with Terraform
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Terraform Init
        run: terraform -chdir=terraform init

      - name: Terraform Plan
        run: terraform -chdir=terraform plan
        
  docker:
    name: Build & Push Docker Images to ECR
    needs: terraform
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push backend image
        run: |
          docker build -t ${{ steps.login-ecr.output.registry }}/backend:latest ./backend
          docker push ${{ steps.login-ecr.output.registry }}/backend:latest

      - name: Build and push frontend image
        run: |
          docker build -t ${{ steps.login-ecr.output.registry }}/frontend:latest ./frontend
          docker push ${{ steps.login-ecr.output.registry }}/frontend:latest

  deploy:
    name: Helm Deploy to EKS
    needs: docker
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Setup Helm
        uses: azure/setup-helm@v3

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region $AWS_REGION --name ecommerce-cluster

      - name: Deploy backend
        run: |
          helm upgrade --install backend ./helm/backend \
            --set image.repository=${{ steps.login-ecr.output.registry }}/backend,image.tag=latest

      - name: Deploy frontend
        run: |
          helm upgrade --install frontend ./helm/frontend \
            --set image.repository=${{ steps.login-ecr.output.registry }}/frontend,image.tag=latest

  monitoring:
    name: Install Monitoring Stack
    needs: deploy
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Setup Helm
        uses: azure/setup-helm@v3

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region $AWS_REGION --name ecommerce-cluster

      - name: Install Prometheus & Grafana
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo update
          helm upgrade --install kube-prometheus prometheus-community/kube-prometheus-stack \
            --namespace monitoring --create-namespace
